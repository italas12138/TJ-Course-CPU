`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2023/06/03 23:10:38
// Design Name: 
// Module Name: sccomp_dataflow
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module sccomp_dataflow(
    input clk_in,       //Ê±ï¿½ï¿½ï¿½Åºï¿½
    input reset,        //ï¿½ï¿½Î»ï¿½Åºï¿½
    output [7:0] o_seg,
    output [7:0] o_sel
    );

/* CPUï¿½ï¿½ */
wire [31:0] pc_out;          //ï¿½ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½IMEMÒªÈ¡ï¿½ï¿½ï¿½ï¿½
wire [31:0] DMEM_addr_in;    //DMEMï¿½ï¿½Ê±ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½Òª×ªï¿½ï¿½


/* IMEMï¿½ï¿½ */
wire [31:0] IMEM_addr_in;     //11Î»Ö¸ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½IMEMï¿½Ð¶ï¿½Ö¸ï¿½ï¿½
wire [31:0] IMEM_inst_out;   //32Î»Ö¸ï¿½ï¿½ï¿½ï¿½

assign IMEM_addr_in = pc_out - 32'h00400000;

/* DMEMï¿½ï¿½ */
wire DMEM_ena;                //ï¿½Ç·ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½DMEM
wire DMEM_read, DMEM_write;            //ï¿½ï¿½Ð´Ö¸ï¿½ï¿½
wire [31:0] DMEM_addr_in_real;        //ï¿½ï¿½Òªï¿½Ãµï¿½ï¿½ï¿½DMEMï¿½ï¿½Ö·
wire [31:0] DMEM_data_out;    //DMEMï¿½ï¿½È¡Ê±ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
wire [31:0] DMEM_data_in;      //ÒªÐ´ï¿½ï¿½DMEMï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 

wire clk_cpu ;

assign DMEM_addr_in_real = (DMEM_addr_in -  32'h10010000)/4;

/* ï¿½ï¿½ï¿½ï¿½ï¿? */
assign pc = pc_out;
assign inst = IMEM_inst_out;


/* IMEMÖ¸ï¿½ï¿½æ´¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿? */
IMEM Imem(
    .IMEM_addr_in(IMEM_addr_in[12:2]),  //11Î»Ö¸ï¿½ï¿½ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½IMEMï¿½Ð¶ï¿½Ö¸ï¿½ï¿½
    .IMEM_inst_out(IMEM_inst_out)     //32Î»Ö¸ï¿½ï¿½ï¿½ï¿½
    );

/* DMEMï¿½ï¿½ï¿½Ý´æ´¢ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ */
DMEM dmem(                      //DMEMï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü¿ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ³ï¿½ï¿½ì²½ï¿½ï¿½È¡ï¿½ï¿½ï¿½Ý£ï¿½Í¬ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½ï¿½Ýµï¿½ï¿½ï¿½Ê?
    .DMEM_clk(clk_cpu),            //DMEMÊ±ï¿½ï¿½ï¿½ÅºÅ£ï¿½Ö»ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½Ê±Ê¹ï¿½ï¿½
    .DMEM_ena(DMEM_ena),            //Ê¹ï¿½ï¿½ï¿½ÅºÅ¶Ë£ï¿½ï¿½ßµï¿½Æ½ï¿½ï¿½Ð§ï¿½ï¿½ï¿½ï¿½Ð§Ê±ï¿½ï¿½ï¿½Ü¶ï¿½È¡/Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    .DMEM_read(DMEM_read),                //readï¿½ï¿½ï¿½ÅºÅ£ï¿½ï¿½ï¿½È¡Ê±ï¿½ï¿½ï¿½ï¿½
    .DMEM_write(DMEM_write),                //writeÐ´ï¿½ÅºÅ£ï¿½Ð´ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½
    .DMEM_addr_in(DMEM_addr_in_real[10:0]),    //11Î»ï¿½ï¿½Ö·ï¿½ï¿½Òªï¿½ï¿½È¡/Ð´ï¿½ï¿½Äµï¿½Ö?
    .DMEM_data_in(DMEM_data_in),     //Ð´ï¿½ï¿½Ê±ÒªÐ´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
    .DMEM_data_out(DMEM_data_out)   //ï¿½ï¿½È¡Ê±ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    );

/* CPUï¿½ï¿½ï¿½ï¿½ */
CPU sccpu(
    .CPU_clk(clk_cpu),               //CPUÖ´ï¿½ï¿½Ê±ï¿½ï¿½
    .CPU_ena(1'b1),                 //Ê¹ï¿½ï¿½ï¿½ÅºÅ¶ï¿½
    .CPU_rst(reset),              //ï¿½ï¿½Î»ï¿½Åºï¿½
    .CPU_inst_in(IMEM_inst_out),    //ï¿½ï¿½Ç°ÒªÖ´ï¿½Ðµï¿½Ö¸ï¿½ï¿½
    .DMEM_data_out(DMEM_data_out),      //ï¿½ï¿½È¡ï¿½ï¿½ï¿½ï¿½DMEMï¿½Ä¾ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
    .DMEM_ena(DMEM_ena),            //ï¿½Ç·ï¿½ï¿½ï¿½Òªï¿½ï¿½ï¿½ï¿½DMEM
    .DMEM_write(DMEM_write),                //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½DMEMï¿½ï¿½ï¿½Ç·ï¿½ÎªÐ´ï¿½ï¿½
    .DMEM_read(DMEM_read),                //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½DMEMï¿½ï¿½ï¿½Ç·ï¿½Îªï¿½ï¿½È¡
    .pc_out(pc_out),            //ï¿½ï¿½ï¿½Ö¸ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½IMEMÒªÈ¡ï¿½ï¿½ï¿½ï¿½
    .DMEM_addr_in(DMEM_addr_in),     //ï¿½ï¿½Òªï¿½Ãµï¿½ï¿½ï¿½DMEMï¿½ï¿½Ö·
    .DMEM_data_in(DMEM_data_in)       //ÒªÐ´ï¿½ï¿½DMEMï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 
    );

seg7x16 seg7x16_inst(
    .clk(clk_in),
	.reset(reset),
	.cs(1'b1),
	.i_data(im_instr_out),
	.o_seg(o_seg),
	.o_sel(o_sel)
    );

Divider Divider_inst(
    .clk(clk_in),                   //ÏµÍ³Ê±ÖÓ
    .rst_n(reset),                 //¸´Î»ÐÅºÅ
    .clk_out(clk_cpu)               //Êä³öÊÊÅäCPUµÄÊ±ÖÓ
    );

endmodule
